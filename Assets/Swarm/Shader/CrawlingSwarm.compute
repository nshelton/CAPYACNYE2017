// Swarm - Special renderer that draws a swarm of swirling/crawling lines.
// https://github.com/keijiro/Swarm

#pragma kernel CrawlingInit
#pragma kernel CrawlingUpdate
#pragma kernel CrawlingReconstruct

#include "UnityCG.cginc"
#include "SimplexNoise3D.cginc"

RWStructuredBuffer<float4> PositionBuffer;
RWStructuredBuffer<float4> TangentBuffer;
RWStructuredBuffer<float4> NormalBuffer;

StructuredBuffer<float4> PositionBufferRO;

// Distance field volume (gradient.xyz, distance)
Texture3D<float4> DFVolume;
SamplerState samplerDFVolume;

CBUFFER_START(Params)
    uint InstanceCount;
    uint HistoryLength;
    float RandomSeed;
    float InitialSpread;
    uint IndexOffset0;
    uint IndexOffset1;
    uint IndexOffset2;
    float Speed;
    float NoiseFrequency;
    float NoiseSpread;
    float NoiseOffset;
CBUFFER_END

float Random(float u, float v)
{
    float f = dot(float2(12.9898, 78.233), float2(u, v)) + RandomSeed;
    return frac(43758.5453 * sin(f));
}

// Nearly uniformly distributed random vector in the unit sphere.
float3 RandomPoint(float id)
{
    float u = Random(id * 0.01334, 0.3728) * UNITY_PI * 2;
    float z = Random(0.8372, id * 0.01197) * 2 - 1;
    float l = Random(4.438, id * 0.01938 - 4.378);
    return float3(float2(cos(u), sin(u)) * sqrt(1 - z * z), z) * sqrt(l);
}

float4 SampleVolume(float3 p)
{
    return DFVolume.SampleLevel(samplerDFVolume, p + 0.5, 0);
}

[numthreads(64, 1, 1)]
void CrawlingInit(uint id : SV_DispatchThreadID)
{
    // Pick two random points and use closer one.
    float3 p1 = RandomPoint(id + 0.0) * InitialSpread;
    float3 p2 = RandomPoint(id + 0.5) * InitialSpread;
    float d1 = SampleVolume(p1).w;
    float d2 = SampleVolume(p2).w;
    float3 p = d1 < d2 ? p1 : p2;

    // Fill the position/tangent/normal buffer.
    for (uint i = 0; i < HistoryLength; i++)
    {
        uint offs = id + i * InstanceCount;
        PositionBuffer[offs] = float4(p, 0);
        TangentBuffer[offs] = float4(0, 0, 1, 0);
        NormalBuffer[offs] = float4(1, 0, 0, 0);
    }
}

[numthreads(64, 1, 1)]
void CrawlingUpdate(uint id : SV_DispatchThreadID)
{
    // Retrieve the previous position.
    float3 p = PositionBuffer[IndexOffset1 + id].xyz;

    // Retrieve a sample from the distance field.
    float4 df = SampleVolume(p);

    // Two independent noise fields.
    float3 offs = float3(0, NoiseOffset, id * NoiseSpread);
    float4 sn1 = snoise(98.4898 + p * NoiseFrequency + offs);
    float4 sn2 = snoise( 1.2278 - p * NoiseFrequency + offs);

    // Apply the boundary condition (distance field) to the first noise field.
    sn1.xyz = -sn1.xyz * df.w + df.xyz * sn1.w;

    // Construct the divergence-free noise field and apply it to the point.
    p += cross(sn1.xyz, sn2.xyz) * Speed;

    // Update the buffer.
    PositionBuffer[IndexOffset2 + id].xyz = p;
}

[numthreads(64, 1, 1)]
void CrawlingReconstruct(uint id : SV_DispatchThreadID)
{
    // Retrieve the history.
    float3 p0 = PositionBufferRO[IndexOffset0 + id].xyz; // Two frames ago
    float3 p1 = PositionBufferRO[IndexOffset1 + id].xyz; // Previous frame
    float3 p2 = PositionBufferRO[IndexOffset2 + id].xyz; // Current frame

    float3 t0 = TangentBuffer[IndexOffset0 + id].xyz; // Two frames ago
    float3 n0 = NormalBuffer[IndexOffset0 + id].xyz;
    float3 b0 = cross(t0, n0);

    // Tangent vectors.
    float3 t1 = normalize(p2 - p0);
    float3 t2 = normalize(p2 - p1);

    // Compute normal vectors based on b0.
    float3 n1 = normalize(cross(b0, t1));
    float3 b1 = cross(t1, n1);
    float3 n2 = normalize(cross(b1, t2));

    // Store the results.
    TangentBuffer[IndexOffset1 + id] = float4(t1, 0);
    TangentBuffer[IndexOffset2 + id] = float4(t2, 0);
    NormalBuffer[IndexOffset1 + id] = float4(n1, 0);
    NormalBuffer[IndexOffset2 + id] = float4(n2, 0);
}
